<!--<!DOCTYPE html>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

	<head>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<title>PROJECT AZIMUTH</title>
		
		<meta name="viewport" content="width=device-width,initial-scale=1, maximum-scale=1,user-scalable=no">
		
		<link href='http://fonts.googleapis.com/css?family=Lato' rel='stylesheet' type='text/css'>	

		Thank you to Fontfabric for the use of Code Light and Code Bold fonts
		
	</head>
	<body>-->
		<div id="header">
			<div id="logo">A</div>
			<% if user_signed_in? %>
				<a href="/auth/logout"><div class="login_button">Logout</div></a>
				<a href="/auth/destroy"><div class="login_button destroy"></div></a>
				<div id="avatar"><%= image_tag(current_user.profile_image_url, :width => 48, :height => 48) %></div>
			<% else %>		
				<a href="/auth/twitter"><div class="login_button">Login</div></a>
			<% end %>
		</div>
		<div id="main">
			<div id="map_wrapper">
				<div id="chart"></div>
				<%= javascript_tag do %>
					icebergs = <%= raw @icebergs.to_json %>
				<% end %>
			</div>
			<div class="content">
				<% if user_signed_in? %>
					<div class="content_realignment">
						<div class="table_wrapper profile">
							<div class="table_expand profile"><h2 style="display: inline">Profile </h2><span class="slide_span profile" style="display: inline-block; width: 895px"></span><div class="x_box profile">+</div></div>
							<div class="table_box profile">
							</div>
						</div>
						<div class="table_wrapper">
							<div class="table_expand"><h2 style="display: inline">Coordinate Table </h2><span class="slide_span table" style="display: inline-block; width: 10px"></span><div class="x_box table">+</div></div>
							<div class="table_box table">
							</div>
						</div>
					</div>
				<% end %>			
				<div id="about_background">
					<div class="overlay_map">
						<div class="content_realignment about_align">
							<div class="text_align">
								<a href="/preferences/">
									<h1>PROJECT</h1>
									<h1 style="font-family: 'code_boldregular'">AZIMUTH</h1>
								</a>
								<h2>About Azimuth</h2>
								<p style="margin-top: 10px">	Azimuth or Project Azimuth is an application created to aid the UBC Sailbot team in its endeavour to cross the Atlantic ocean in an unmanned aquatic vehicle. As an extension, the application can be applied to actual marine vessels.<br/><br/>
									While not providing the software to control the vehicle, the purpose of this project is to track and navigate the Sailbot or any other vessel on its journey across the ocean. Using Twitter and utilizing its geo-location services, the software will track tweets made by the Sailbot/vessel and the location where they were made.<br/><br/>
									Azimuth's niche feature is its tracking of icebergs that pose a threat to unmanned vehicles (and manned ones as well). Using the Canadian Ice Service database, icebergs are tracked in order to provide navigation solutions.<br/><br/>
									Initially, Azimuth will start as a web application which will feature a map of progress made by the Sailbot/vessel and known iceberg locations. Data is restricted by login information tied to Twitter profiles.
								</p>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div id="footer">
		</div>
		
		<script>
			$(document).ready(function(){	
				var profileIsOpen = true;
				var tableIsOpen = false;
				
				$(".x_box.profile").click(function() {
					check_Open(profileIsOpen, 875, ".profile");
					profileIsOpen = !profileIsOpen;
				});
				
				$(".x_box.table").click(function() {
					check_Open(tableIsOpen, 775, ".table");
					tableIsOpen = !tableIsOpen;
				});
				
				function check_Open(isOpen, x, y){
					if(isOpen) {
						expand_table(10,0,0,y);
					}
					else {
						expand_table(x,250,45,y)
					}
				}		
				
				function expand_table(x, y, z, a) {
					$(".slide_span" + a + "").animate({width: x + "px" }, "fast",function(){
						$(".x_box" + a + "").css({
							 '-moz-transform':'rotate(' + z + 'deg)',
							 '-webkit-transform':'rotate(' + z + 'deg)',
							 '-o-transform':'rotate(' + z + 'deg)',
							 '-ms-transform':'rotate(' + z + 'deg)',
							 'transform':'rotate(' + z + 'deg)'
						});
					});
					$(".table_box" + a + "").animate({height: y + "px" }, "slow",function(){
						// $("#signupform").fadeIn("slow");
					});
				}
				
			});
			
			$(document).ready(function(){
				// Pretty circles --------->
				color = d3.scale.linear()
					.domain([12, 30])
					.range(["red", "green"]);  
					
				size = d3.scale.linear()
					.domain([0, 10]);
				// <----- Pretty circles

				var countryFeature;

				var datacentreFeature;

				var projection = d3.geo.azimuthal()
							 //.scale(300)
							 .scale(600)
							 .origin([-71.03,42.37])
							 .mode('orthographic')
							 .translate([400, 400]);

				var circle = d3.geo.greatCircle().origin(projection.origin());

				// TODO fix d3.geo.azimuthal to be consistent with scale
				var scale = {  orthographic: 380,  stereographic: 380,  gnomonic: 380,  
							 equidistant: 380 / Math.PI * 2,  equalarea: 380 / Math.SQRT2};

				var path = d3.geo.path().projection(projection);

				var svg = d3.select("#chart")
							.append('svg:svg')
							.attr('width', 800)    
							.attr('height', 600)
							.on('mousedown', mousedown);

				var countries = svg.append('g')
							.attr('width', 800)
							.attr('height', 600)
							.attr('id', 'countries');

				var datacentres = svg.append('g')
							.attr('width', 800)
							.attr('height', 600)
							.attr('id', 'datacentres');

				var bubble_data2 = d3.text("IIP_2014IcebergSeason.csv", function(text) {
								   d3.csv.parse(text);      
				});

				var bubble_radius = 3;

				var tooltip = d3.select("body")
				  .append("div")
				  .style("position", "absolute")
				  .style("z-index", "10")
				  .attr("class", "hoverinfo")
				  .style("visibility", "hidden");

				d3.json('world-countries.json', function(collection) {  
				  
					countryFeature = countries.selectAll('path')
					.data(collection.features)
					  .enter().append('svg:path')
								.attr('d', clip);
				  
				  countryFeature.append("svg:title").text(function(d) { return d.properties.name; }).attr('text-anchor', 'middle');

				});

				d3.json('datacentres.json', function(json) {
				  datacentreFeature = datacentres.selectAll('g')
					  .data(json.features)
					  .enter()
					  .append('g')
					  .append('svg:circle')
						 .attr('class', function(d) { return assignClass(d.properties.kgCO2e); })
						 .attr('r', function(d) { return 10; })
						 //return size(ballSize(d.properties.kgCO2e))
						 .attr("fill", function(d) { return color((10 * Math.exp((1 - d.properties.kgCO2e), 2))); });
				   datacentreFeature = datacentres.selectAll('g');

				});

				d3.select(window).on('mousemove', mousemove)
								 .on('mouseup', mouseup);

				d3.select('select').on('change', 
				  function() {  
				  projection.mode(this.value).scale(scale[this.value]);  
				  refresh(750);
				});

				// David's old code:
				// d3.text("IIP_2014IcebergSeason.csv", function(text) {
				// 	  var bubble_data = d3.csv.parse(text);
				// 	  plot_bubbles(bubble_data);
				// });
				//
				// The following is test code:
				// plot_bubbles([{"id": 1, "longitude": "75", "latitude": "-30"},
				// 			  {"id": 2, "longitude": "74", "latitude": "-29"},
				// 			  {"id": 3, "longitude": "76", "latitude": "-31"}]);

				plot_bubbles(icebergs);

				var m0, o0;

				function mousedown() {  
				  m0 = [d3.event.pageX, d3.event.pageY];  
				  o0 = projection.origin();  
				  d3.event.preventDefault();
				}

				function mousemove() {  
				  if (m0) {    
					var m1 = [d3.event.pageX, d3.event.pageY], 
					  o1 = [o0[0] + (m0[0] - m1[0]) / 8, o0[1] + (m1[1] - m0[1]) / 8];    
					  projection.origin(o1);    
					  circle.origin(o1);    
					  refresh();  
				  }
				}

				function mouseup() {  
				  if (m0) {    
					mousemove();    
					m0 = null;  
				  }
				}

				function refresh(duration) {  
				  (duration ? 
					countryFeature.transition().duration(duration) 
					: countryFeature)
					  .attr('d', clip);
				 
				//  (duration ? 
				//    datacentreFeature.transition().duration(duration) 
				//    : datacentreFeature)
				//      .attr('transform', function (d) { return "translate(" + clip(d) + ")"; });
				//   
				}

				function clip(d) {  
				  return path(circle.clip(d));
				}

				function ballSize (datum) {
				  return (datum.kgCO2e > 1) ? 10 : (10 * Math.exp((1 - datum.kgCO2e), 2));
				}  

				function assignClass (datum) {
				  return (datum.kgCO2e > 0.2) ? "f" : "m"; 
				}


				function create_tooltip_message(bubble_data) {
					//message = "Name: " + bubble_data.name + "<br/> Class: " + bubble_data.fillKey + "<br/> Lat: " + bubble_data.latitude + " Long: " + bubble_data.longitude + "<br/> Sequencing: " + bubble_data.mbs + " Mbs" + "<br/>" + "Project: " + bubble_data.project;
					//ICE-YEAR,BERG_NUMBER,DATE,TIME,LATITUDE,LONGITUDE,METHOD,SIZE,SHAPE,SOURCE

					//message = "ICE_YEAR: " + bubble_data.ICE-YEAR + "<br/> BERG_NUMBER: " + bubble_data.BERG_NUMBER + "<br/> DATE: " + bubble_data.DATE + "<br/> LATITUDE: " + bubble_data.LATITUDE + " <br/> LONGITUDE: " + bubble_data.LONGITUDE + "<br/> METHOD: " + bubble_data.METHOD + "<br/> SIZE: " + bubble_data.SIZE + "<br/> SHAPE: " + bubble_data.SHAPE + "<br/> SOURCE: " + bubble_data.SOURCE;
					message = "berg_number: " + bubble_data.berg_number + "<br/> date: " + bubble_data.date + "<br/> latitude: " + bubble_data.latitude + " <br/> longitude: " + bubble_data.longitude + "<br/> size: " + bubble_data.size + "<br/> shape: " + bubble_data.shape;
					return message;
				}

				function plot_bubbles(bubble_data) {
					// plot circles
					svg.append("g")
						.attr("class", "bubble")
						.selectAll("circle")
						.data(bubble_data)
						.enter().append("circle")
						.attr("transform", function(d) {
							dat = [d.longitude, d.latitude];
							return "translate(" + projection(dat) + ")"; 
							})
						.attr("r", function() {
							return bubble_radius;
							})
						.on("mouseover", function(d){
							tooltip.html(create_tooltip_message(d));
							return tooltip.style("visibility", "visible");
							})
						.on("mousemove", function(){
							return tooltip.style("top",(d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");
							})
						.on("mouseout", function(){
							return tooltip.style("visibility", "hidden");
							});
				}
			});
		</script>
	<!--</body>
</html>-->

